(use "./utils/stores/store" (create :as store) action)
(use "./gui/view" (render :as view))
(use "./utils/vdom/vdom" (update :as update-vdom))

(include "./src/macros")

;;; We need a store right here that connects
;;; the view code with the results of calling
;;; the main port's connections
(defconstant **store (store (#(state msg)
                              (switch (getf msg 'type)
                                ('got-widgets (getf msg 'payload))
                                (:default state)))))

(ed/use-port 'main-port
  ('get-widgets ('ok (widgets) 
                  (.log console 'all widgets)
                  (.dispatch **store (action 'got-widgets widgets)))
                ('error (exc) 
                  (.log console 'all exc)))
  ('get-widgets-by-tags ('ok (widgets)
                          (.log console 'by-tags widgets))
                        ('error (exc)
                          (.log console 'by-tags exc)))
  ('get-widget-by-name ('ok (widget)
                          (.log console 'by-name widget))
                       ('error (exc)
                          (.log console 'by-name exc)))
  ('get-widget-by-id ('ok (widget)
                      (.log console 'by-id widget))
                     ('error (exc)
                      (.log console 'by-id exc))))

(ed/onload
  (let ((app-node (.query-selector document "#app"))
        (new-node (nil)))
    (defun render (state)
      (assign new-node (view state (#(msg) (.dispatch **store msg))))
      (assign app-node (update-vdom app-node new-node)))
    (.subscribe **store render)
    (ed/send-port 'main-port 'get-widgets)))
                                  
