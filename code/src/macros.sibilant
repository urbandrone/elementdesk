(namespace ed)

;;; APP MACROS
(macro send-port (port-id type ...payload)
  (when (< (length payload) 2)
    (assign payload (ternary (< (length payload) 1) (list "null") (first payload))))
  `(scoped
    (when (exists? (getf window @port-id))
      (.post-message (getf window @port-id)
                     (hash :type @type
                           :payload @payload)))))

(macro use-port (port-id ...responses)
  (with-gensyms (port event-win event-port)
    (defvar sbody (.map responses
                        (#(r)
                          (let* ((c (getf r 'contents))
                                 (topic (first c))
                                 (types (map (rest c)
                                             (#(t)
                                              (let ((type (first (getf t 'contents)))
                                                    (args (second (getf t 'contents)))
                                                    (body (.slice (getf t 'contents) 2)))
                                                `(@type
                                                  (call (lambda @args ...@body)
                                                        (getf @event-port 'data 'payload))))))))
                            `(@topic (switch (getf @event-port 'data 'type)
                                        ...@types
                                        (:default (nil))))))))
    `(setf window
           'onmessage
           (#(@event-win)
            (when (and (eql? (getf @event-win 'source) window)
                       (eql? (getf @event-win 'data) @port-id))
              (let ((@port (getf @event-win 'ports 0)))
                (setf window @port-id @port)
                (setf @port 'onmessage (#(@event-port)
                                        (switch (getf @event-port 'data 'topic)
                                          ...@sbody
                                          (:default (nil)))))
                (.dispatch-event window (new CustomEvent 'ed-port-setup))))))))

(macro onload (...funcs)
  `(.add-event-listener window 'ed-port-setup (#() ...@funcs)))


;;; MAIN MACROS
(macro provide-port (ctor win ...requests)
  (with-gensyms (ports port-m port-r event)
    (defvar sbody (.map requests 
                        (#(r)
                          (let* ((type (first (getf (first (getf r 'contents)) 'contents)))
                                 (args (rest (getf (first (getf r 'contents)) 'contents)))
                                 (body (rest (getf r 'contents)))
                                 (vals (map args (#(a) `(getf @event 'data 'payload)))))
                            `(@type 
                              (call (#(...@args)
                                      (pipe ...@body 
                                            (.run-task (#(err)
                                                        (.post-message @port-m
                                                                      (hash :topic @type
                                                                            :type 'error
                                                                            :payload err)))
                                                      (#(data)
                                                        (.post-message @port-m
                                                                      (hash :topic @type
                                                                            :type 'ok
                                                                            :payload data))))))
                                    ...@vals))))))
    `(let* ((@ports (new @ctor))
            (@port-r (getf @ports 'port1))
            (@port-m (getf @ports 'port2)))
      (.on @port-m 
           'message 
           (#(@event)
            (switch (getf @event 'data 'type)
              ...@sbody
              (:default (nil)))))
      (.start @port-m)
      (.post-message (getf @win 'web-contents)
                     'send-port
                     (nil)
                     (list @port-r)))))
