(use "sibilisp/prelude" task (concatenate :as conc) map chain reduce traverse sequence select find maybe-as-task)
(use "./repo/repo" get-widgets-list)
(use "../utils/filesys/fileops" read-file)
(use "../utils/filesys/filepath" filepath)



(defvar *widgets* (nil))

(provide
  (defun get-all ()
    (|>
      (get-widgets-all)
      (chain (#-> (traverse (getf task 'lift) read-templates))))))

(provide
  (defun get-by-tags (...tags)
    (|>
      (get-widgets-by-tags ...tags)
      (chain (#-> (traverse (getf task 'lift) read-templates))))))

(provide
  (defun get-by-id (id)
    (|>
      (get-widget-by-id id)
      (chain read-templates))))

(provide
  (defun get-by-name (name)
    (|>
      (get-widget-by-name name)
      (chain read-templates))))



; get-widgets-all get-widgets-by-tags get-widget-by-id get-widget-by-name
(defun get-widgets-all ()
  (if (nil? *widgets*)
      (|>
        (get-widgets-list)
        (map (#(widgets)
              (assign *widgets* widgets)
              widgets)))
      (task.of *widgets*)))

(defun get-widgets-by-tags (...tags)
  (|>
    (get-widgets-all)
    (map (#-> (select (#(widget)
                        (.some tags (#(t)
                                      (.includes (getf widget 'tags) t)))))))))

(defun get-widget-by-id (id)
  (|>
    (get-widgets-all)
    (chain (#-> (find (#(w) (eql? (getf w 'id) id)))
                (maybe-as-task)))))

(defun get-widget-by-name (name)
  (|>
    (get-widgets-all)
    (chain (#-> (find (#(w) (eql? (getf w 'name) name)))
                (maybe-as-task)))))


(defun read-templates (widget-data)
  (let ((root (filepath.lift (getf widget-data 'root))))
    (|>
      (traverse (getf widget-data 'templates)
                (getf task 'lift)
                (read-template-resources root))
      (map (#(template-data) (hash-merge widget-data (hash :template (first template-data))))))))

(defun read-template-resources (root-path)
  (#({name html css js})
    (let ((template-html (conc root-path (filepath.lift (+ name "/" html))))
          (template-css (conc root-path (filepath.lift (+ name "/" css))))
          (template-js (conc root-path (filepath.lift (+ name "/" js)))))
      (|>
        (list
          (read-file template-html)
          (read-file template-css)
          (read-file template-js))
        (sequence (getf task 'lift))
        (map (#([html css js]) (hash :&html :&css :&js)))))))
